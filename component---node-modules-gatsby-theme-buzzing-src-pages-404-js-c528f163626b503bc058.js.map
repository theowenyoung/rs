{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-i18n/src/components/localized-link.js","webpack:///./node_modules/gatsby-theme-buzzing/src/gatsby-theme-timeline/components/seo.js","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./node_modules/gatsby-theme-buzzing/src/pages/404.js","webpack:///./node_modules/gatsby-theme-buzzing/utils/index.js","webpack:///./node_modules/gatsby-theme-buzzing/src/util.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["LocalizedLink","to","language","props","useLocalization","defaultLang","locale","linkLocale","localizedPath","SEO","description","lang","meta","title","imageSource","imageAlt","location","pageType","item","useStaticQuery","site","avatar","defaultImage","siteDescription","t","siteMetadata","localize","metaDescription","telegram","author","siteUrl","keywords","avatarImage","childImageSharp","fixed","src","getImagePath","imageURI","match","urlJoin","withPrefix","image","fluid","imageAltText","siteTitle","pageTitle","authorJSONLD","name","logoJSONLD","url","caption","schemaOrgJSONLD","postURL","pathname","datePublished","Date","date","push","itemListElement","position","headline","publisher","logo","htmlAttributes","content","join","property","concat","type","JSON","stringify","defaultProps","normalize","strArray","resultArray","length","TypeError","first","shift","replace","i","component","str","parts","split","arguments","slice","call","module","exports","definition","NotFoundPage","style","width","height","display","justifyContent","alignItems","className","kebabToSnakeCase","key","defaultValue","value","Array","isArray","localeItem","getTitle","finalTitle","parent","provider","titleArr","pureTitle","pureTagline","sharedContent","field","startsWith","getSharedTitle","getExcerpt","finalExcerpt","excerpt","path","isDefaultLang","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---node-modules-gatsby-theme-buzzing-src-pages-404-js-c528f163626b503bc058.js","sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { localizedPath } from \"../helpers\"\nimport { useLocalization } from \"../hooks/use-localization\"\n\nexport const LocalizedLink = ({ to, language, ...props }) => {\n  const { defaultLang, locale } = useLocalization()\n  const linkLocale = language || locale\n\n  return <Link {...props} to={localizedPath(defaultLang, linkLocale, to)} />\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql, withPrefix } from \"gatsby\"\nimport { useLocalization } from \"gatsby-theme-i18n\"\nimport urlJoin from \"url-join\"\nimport { t } from \"../../util\"\nfunction SEO({\n  description,\n  lang,\n  meta,\n  title,\n  imageSource,\n  imageAlt,\n  location,\n  pageType,\n  item,\n}) {\n  const { site, avatar, defaultImage } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n            keywords\n            telegram\n            localize {\n              locale\n              title\n              description\n              author\n              keywords\n            }\n          }\n        }\n        defaultImage: file(\n          absolutePath: { regex: \"/avatar.(jpeg|jpg|gif|png)/\" }\n        ) {\n          childImageSharp {\n            fluid(maxWidth: 630, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        avatar: file(absolutePath: { regex: \"/avatar.(jpeg|jpg|gif|png)/\" }) {\n          childImageSharp {\n            fixed(width: 48, height: 48) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const { locale } = useLocalization()\n  const siteDescription = t(\n    \"description\",\n    site.siteMetadata.localize,\n    site.siteMetadata.description,\n    locale\n  )\n  const metaDescription = description || siteDescription\n  const telegram = site.siteMetadata.telegram\n\n  const author = t(\n    \"author\",\n    site.siteMetadata.localize,\n    site.siteMetadata.author,\n    locale\n  )\n  const siteUrl = site.siteMetadata.siteUrl\n  const keywords = t(\n    \"keywords\",\n    site.siteMetadata.localize,\n    site.siteMetadata.keywords,\n    locale\n  )\n  const avatarImage = avatar.childImageSharp.fixed.src\n  const getImagePath = imageURI => {\n    if (\n      !imageURI.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )\n    )\n      return urlJoin(siteUrl, withPrefix(imageURI))\n\n    return imageURI\n  }\n  const image = imageSource\n    ? getImagePath(imageSource)\n    : getImagePath(\n        defaultImage ? defaultImage?.childImageSharp?.fluid.src : null\n      )\n  const imageAltText = imageAlt || metaDescription\n  const siteTitle = t(\n    \"title\",\n    site.siteMetadata.localize,\n    site.siteMetadata.title,\n    locale\n  )\n  const pageTitle = `${title} - ${siteTitle}`\n  const authorJSONLD = {\n    \"@type\": `Person`,\n    name: author,\n  }\n\n  const logoJSONLD = {\n    \"@type\": `ImageObject`,\n    url: getImagePath(avatarImage),\n    \"@id\": urlJoin(siteUrl, withPrefix(`#logo`)),\n    caption: `${siteTitle} Logo`,\n  }\n\n  const schemaOrgJSONLD = [\n    {\n      \"@context\": `http://schema.org`,\n      \"@type\": `WebSite`,\n      \"@id\": urlJoin(siteUrl, withPrefix(`#website`)),\n      url: withPrefix(siteUrl),\n      name: siteTitle,\n      image: logoJSONLD,\n    },\n  ]\n  if (pageType === `detail`) {\n    const postURL = urlJoin(siteUrl, location.pathname)\n    const datePublished = new Date(item.date)\n    schemaOrgJSONLD.push(\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BreadcrumbList`,\n        itemListElement: [\n          {\n            \"@type\": `ListItem`,\n            position: 1,\n            item: {\n              \"@id\": postURL,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BlogPosting`,\n        url: postURL,\n        name: title,\n        headline: title,\n        image: { \"@type\": `ImageObject`, url: image },\n        author: authorJSONLD,\n        publisher: {\n          ...authorJSONLD,\n          \"@type\": `Organization`,\n          logo: logoJSONLD,\n        },\n        datePublished,\n        description: metaDescription,\n      }\n    )\n  }\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || locale,\n      }}\n      title={pageTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: `keywords`,\n          content: keywords.join(`,`),\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          image\n            ? [\n                {\n                  name: `og:image`,\n                  content: image,\n                },\n                {\n                  name: `og:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:image`,\n                  content: image,\n                },\n                {\n                  name: `twitter:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:card`,\n                  content: `summary_large_image`,\n                },\n              ]\n            : [\n                {\n                  name: `twitter:card`,\n                  content: `summary`,\n                },\n              ]\n        )\n        .concat(\n          telegram\n            ? [\n                {\n                  name: `telegram:channel`,\n                  content: telegram,\n                },\n              ]\n            : []\n        )\n        .concat(meta)}\n    >\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  meta: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n  imageSource: PropTypes.string,\n}\n\nexport default SEO\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport SEO from \"gatsby-theme-timeline/src/components/seo\"\nconst NotFoundPage = () => (\n  <>\n    <SEO title=\"404: Not found\" />\n    <div\n      style={{\n        width: `100vw`,\n        height: `100vh`,\n        display: `flex`,\n        justifyContent: `center`,\n        alignItems: `center`,\n      }}\n    >\n      <div>\n        <h1>NOT FOUND</h1>\n        <p>\n          {`You just hit a route that doesn't exist... Please visit `}{\" \"}\n          <Link to=\"/\" className=\"link-style\">\n            Homepage\n          </Link>\n        </p>\n      </div>\n    </div>\n  </>\n)\nexport default NotFoundPage\n","const kebabToSnakeCase = str => {\n  return str.replace(/-/g, \"_\")\n}\nexports.kebabToSnakeCase = kebabToSnakeCase\nconst t = (key, localize, defaultValue, locale = \"zh\") => {\n  let value = defaultValue\n  if (localize && Array.isArray(localize)) {\n    for (let i = 0; i < localize.length; i++) {\n      const localeItem = localize[i]\n      const currentLocale = localeItem.locale\n      if (locale === currentLocale) {\n        if (localeItem[key]) {\n          value = localeItem[key]\n          return value\n        }\n      }\n    }\n  }\n  return value\n}\nexports.t = t\nconst getTitle = (item, locale = \"zh\") => {\n  let finalTitle = item.title\n  let localize = []\n  if (item.parent && item.parent.localize) {\n    localize = item.parent.localize\n  }\n  const { provider } = item\n  if (provider === \"Product Hunt\") {\n    const titleArr = finalTitle.split(\" - \")\n    const pureTitle = titleArr[0]\n    const pureTagline = titleArr[1]\n    let finalTagline = t(\"tagline\", localize, pureTagline, locale)\n    finalTitle = `${pureTitle} - ${finalTagline}`\n  } else if (provider === \"Twitter\") {\n    const sharedContent = item.sharedContent\n    const retweeted =\n      sharedContent && sharedContent.title && finalTitle.startsWith(`RT @`)\n    let field = \"full_text\"\n    if (retweeted) {\n      field = \"retweeted_status_full_text\"\n      finalTitle = sharedContent.title\n    }\n\n    finalTitle = t(field, localize, finalTitle, locale)\n  } else {\n    finalTitle = t(\"title\", localize, finalTitle, locale)\n  }\n  return finalTitle\n}\nexports.getTitle = getTitle\nconst getSharedTitle = (item, locale = \"zh\") => {\n  const { sharedContent } = item\n\n  if (!sharedContent || !sharedContent.title) {\n    return null\n  }\n  let finalTitle = sharedContent.title\n  let localize = []\n  if (item.parent && item.parent.localize) {\n    localize = item.parent.localize\n  }\n  finalTitle = t(\"quoted_status_full_text\", localize, finalTitle, locale)\n  return finalTitle\n}\nexports.getSharedTitle = getSharedTitle\nconst getExcerpt = (item, locale = \"zh\") => {\n  let finalExcerpt = item.excerpt\n  let localize = []\n  if (item.parent && item.parent.localize) {\n    localize = item.parent.localize\n  }\n  const { provider } = item\n  if (provider === \"Product Hunt\" || provider === \"Youtube\") {\n    finalExcerpt = t(\"description\", localize, finalExcerpt, locale)\n  } else if (provider === \"Reddit\") {\n    finalExcerpt = t(\"the_new_excerpt\", localize, finalExcerpt, locale)\n  } else {\n    finalExcerpt = t(\"excerpt\", localize, finalExcerpt, locale)\n  }\n  return finalExcerpt\n}\nexports.getExcerpt = getExcerpt\n","export {\n  t,\n  getTitle,\n  getExcerpt,\n  getSharedTitle,\n  kebabToSnakeCase,\n} from \"../utils\"\n\nfunction isDefaultLang(locale, defaultLang) {\n  return locale === defaultLang\n}\n\nexport function localizedPath(defaultLang, locale, path) {\n  // The default language isn't prefixed\n  if (isDefaultLang(locale, defaultLang)) {\n    return path\n  }\n\n  const [, base] = path.split(`/`)\n\n  // If for whatever reason we receive an already localized path\n  // (e.g. if the path was made with location.pathname)\n  // just return it as-is.\n  if (base === locale) {\n    return path\n  }\n\n  // If it's another language, prefix with the locale\n  return `/${locale}${path}`\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}